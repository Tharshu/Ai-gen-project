/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Privileges as PrismaPrivileges } from "@prisma/client";

export class PrivilegesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PrivilegesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.privileges.count(args);
  }

  async privilegesItems<T extends Prisma.PrivilegesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivilegesFindManyArgs>
  ): Promise<PrismaPrivileges[]> {
    return this.prisma.privileges.findMany<Prisma.PrivilegesFindManyArgs>(args);
  }
  async privileges<T extends Prisma.PrivilegesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivilegesFindUniqueArgs>
  ): Promise<PrismaPrivileges | null> {
    return this.prisma.privileges.findUnique(args);
  }
  async createPrivileges<T extends Prisma.PrivilegesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivilegesCreateArgs>
  ): Promise<PrismaPrivileges> {
    return this.prisma.privileges.create<T>(args);
  }
  async updatePrivileges<T extends Prisma.PrivilegesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivilegesUpdateArgs>
  ): Promise<PrismaPrivileges> {
    return this.prisma.privileges.update<T>(args);
  }
  async deletePrivileges<T extends Prisma.PrivilegesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivilegesDeleteArgs>
  ): Promise<PrismaPrivileges> {
    return this.prisma.privileges.delete(args);
  }
}
